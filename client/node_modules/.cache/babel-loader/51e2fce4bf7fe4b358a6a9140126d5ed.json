{"ast":null,"code":"var _jsxFileName = \"H:\\\\Agro Chain\\\\agro_chain\\\\client\\\\src\\\\components\\\\productsComponents\\\\seasons\\\\seasonItems.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport * as adminApi from \"../../../api/admin\";\nimport useInputState from \"../../../hooks/useInputState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alert = /*#__PURE__*/React.forwardRef(_c = function Alert(props, ref) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    ref: ref,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 12\n  }, this);\n});\n_c2 = Alert;\nexport default function SeasonsItems(props) {\n  _s();\n\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const {\n    SEASON_DESCRIPTION,\n    SEASON_END_DAY,\n    SEASON_END_MONTH,\n    SEASON_NAME,\n    SEASON_START_DAY,\n    SEASON_START_MONTH,\n    SEASON_ID\n  } = props;\n  let startMonth = SEASON_START_MONTH + 1;\n  let startDay = SEASON_START_DAY;\n  let endMonth = SEASON_END_MONTH + 1;\n  let endDay = SEASON_END_DAY;\n\n  if (startMonth <= 9) {\n    startMonth = `0${startMonth}`;\n  }\n\n  if (startDay <= 9) {\n    startDay = `0${startDay}`;\n  }\n\n  if (SEASON_END_MONTH <= 9) {\n    endMonth = `0${endMonth}`;\n  }\n\n  if (SEASON_END_DAY <= 9) {\n    endDay = `0${endDay}`;\n  }\n\n  let date = new Date();\n  const startDateString = `${date.getFullYear()}-${startMonth}-${startDay}T00:00:00.000`;\n  const startEndString = `${date.getFullYear()}-${endMonth}-${endDay}T00:00:00.000`;\n  console.log(startDateString, startEndString);\n  const [seasonName, handleChangeSeasonName] = useInputState(SEASON_NAME);\n  const [description, handleChangeDescription] = useInputState(SEASON_DESCRIPTION);\n  const [openEditForm, setOpenEditForm] = useState(false);\n  const [startDate, setStartDate] = useState(new Date(startDateString));\n  const [endDate, setEndDate] = useState(new Date(startEndString));\n  const [snakeBarOpen, setSnakeBarOpen] = useState(false);\n  const [snakeBarType, setSnakeBarType] = useState(\"success\");\n  const [snakeMessage, setSnakeMessage] = useState(\"\");\n\n  const cancelSeasonEdit = () => {\n    setOpenEditForm(false);\n  };\n\n  const handleClickEdit = () => {\n    setOpenEditForm(true);\n  };\n\n  const handleCloseSnakeBar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setSnakeBarOpen(false);\n  };\n\n  const updateForm = async () => {\n    const res = await adminApi.updateSeasons(seasonName, startDate.getDay(), startDate.getMonth(), endDate.getDay(), endDate.getMonth(), description, SEASON_ID);\n\n    if (res.status === 200) {\n      setSnakeBarOpen(true);\n      setSnakeBarType(\"success\");\n      setSnakeMessage(\"Successfully updated\");\n      window.location.reload();\n    } else {\n      setSnakeBarOpen(true);\n      setSnakeBarType(\"error\");\n      setSnakeMessage(\"Failed to Update\");\n    }\n\n    setOpenEditForm(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snakeBarOpen,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnakeBar,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnakeBar,\n        severity: snakeBarType,\n        sx: {\n          width: '100%'\n        },\n        children: snakeMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openEditForm,\n      onClose: cancelSeasonEdit,\n      fullWidth: true,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: [\"Edit \", SEASON_NAME]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              item: true,\n              direction: \"column\",\n              spacing: 2,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                sx: {\n                  width: \"100%\"\n                },\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  id: \"registration-name\",\n                  label: \"Season Name\",\n                  variant: \"standard\",\n                  value: seasonName,\n                  onChange: handleChangeSeasonName,\n                  required: true,\n                  fullWidth: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                sx: {\n                  width: \"100%\"\n                },\n                children: /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n                  dateAdapter: AdapterDateFns,\n                  children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                    openTo: \"month\",\n                    views: ['month', 'day'],\n                    label: \"Select when the season starts\",\n                    value: startDate,\n                    onChange: newValue => {\n                      setStartDate(newValue);\n                    },\n                    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                      helperText: null,\n                      sx: {\n                        width: \"100%\",\n                        minWidth: \"270px\",\n                        marginBottom: \"0.5rem\",\n                        marginTop: \"0.5rem\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 158,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                sx: {\n                  width: \"100%\"\n                },\n                children: /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n                  dateAdapter: AdapterDateFns,\n                  children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                    openTo: \"month\",\n                    views: ['month', 'day'],\n                    label: \"Select when the season Ends\",\n                    value: endDate,\n                    onChange: newValue => {\n                      setEndDate(newValue);\n                    },\n                    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                      helperText: null,\n                      sx: {\n                        width: \"100%\",\n                        minWidth: \"270px\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 182,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                sx: {\n                  width: \"100%\"\n                },\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  id: \"registration-description\",\n                  label: \"Description\",\n                  type: \"text\",\n                  variant: \"standard\",\n                  value: description,\n                  onChange: handleChangeDescription,\n                  multiline: true,\n                  rows: 6,\n                  required: true,\n                  fullWidth: true,\n                  placeholder: \"250 Charecters max\",\n                  inputProps: {\n                    maxLength: 250\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: updateForm,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: cancelSeasonEdit,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        maxWidth: 345\n      },\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h5\",\n          component: \"div\",\n          children: SEASON_NAME\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            height: \"10rem\",\n            overflow: \"hidden\",\n            textOverflow: \"string\"\n          },\n          children: SEASON_DESCRIPTION\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          children: [\"Duration: \", `${SEASON_START_DAY} ${months[SEASON_START_MONTH]} - ${SEASON_END_DAY} ${months[SEASON_END_MONTH]}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          onClick: handleClickEdit,\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          color: \"error\" // onClick={handleClickOpenDelete} \n          ,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SeasonsItems, \"ubRfp1tfYL2Sz6KH6bdmBiQjVXM=\", false, function () {\n  return [useInputState, useInputState];\n});\n\n_c3 = SeasonsItems;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Alert$React.forwardRef\");\n$RefreshReg$(_c2, \"Alert\");\n$RefreshReg$(_c3, \"SeasonsItems\");","map":{"version":3,"sources":["H:/Agro Chain/agro_chain/client/src/components/productsComponents/seasons/seasonItems.js"],"names":["React","useState","Card","CardActions","CardContent","Button","Typography","Grid","AdapterDateFns","Snackbar","MuiAlert","LocalizationProvider","DatePicker","Dialog","DialogActions","DialogContent","DialogTitle","TextField","Box","adminApi","useInputState","Alert","forwardRef","props","ref","SeasonsItems","months","SEASON_DESCRIPTION","SEASON_END_DAY","SEASON_END_MONTH","SEASON_NAME","SEASON_START_DAY","SEASON_START_MONTH","SEASON_ID","startMonth","startDay","endMonth","endDay","date","Date","startDateString","getFullYear","startEndString","console","log","seasonName","handleChangeSeasonName","description","handleChangeDescription","openEditForm","setOpenEditForm","startDate","setStartDate","endDate","setEndDate","snakeBarOpen","setSnakeBarOpen","snakeBarType","setSnakeBarType","snakeMessage","setSnakeMessage","cancelSeasonEdit","handleClickEdit","handleCloseSnakeBar","event","reason","updateForm","res","updateSeasons","getDay","getMonth","status","window","location","reload","width","newValue","params","minWidth","marginBottom","marginTop","maxLength","maxWidth","height","overflow","textOverflow"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport TextField from '@mui/material/TextField';\r\nimport Box from '@mui/material/Box';\r\n\r\nimport * as adminApi from \"../../../api/admin\"\r\nimport useInputState from \"../../../hooks/useInputState\"\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function SeasonsItems(props) {\r\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n    const {\r\n        SEASON_DESCRIPTION,\r\n        SEASON_END_DAY,\r\n        SEASON_END_MONTH,\r\n        SEASON_NAME,\r\n        SEASON_START_DAY,\r\n        SEASON_START_MONTH,\r\n        SEASON_ID\r\n    } = props\r\n\r\n    let startMonth = SEASON_START_MONTH + 1;\r\n    let startDay = SEASON_START_DAY;\r\n    let endMonth = SEASON_END_MONTH + 1;\r\n    let endDay = SEASON_END_DAY;\r\n\r\n    if (startMonth <= 9) {\r\n        startMonth = `0${startMonth}`\r\n    }\r\n    if (startDay <= 9) {\r\n        startDay = `0${startDay}`\r\n    }\r\n    if (SEASON_END_MONTH <= 9) {\r\n        endMonth = `0${endMonth}`\r\n    }\r\n    if (SEASON_END_DAY <= 9) {\r\n        endDay = `0${endDay}`\r\n    }\r\n\r\n    let date = new Date()\r\n\r\n    const startDateString = `${date.getFullYear()}-${startMonth}-${startDay}T00:00:00.000`\r\n    const startEndString = `${date.getFullYear()}-${endMonth}-${endDay}T00:00:00.000`\r\n\r\n    console.log(startDateString, startEndString)\r\n\r\n    const [seasonName, handleChangeSeasonName] = useInputState(SEASON_NAME);\r\n    const [description, handleChangeDescription] = useInputState(SEASON_DESCRIPTION);\r\n\r\n    const [openEditForm, setOpenEditForm] = useState(false);\r\n    const [startDate, setStartDate] = useState(new Date(startDateString));\r\n    const [endDate, setEndDate] = useState(new Date(startEndString));\r\n    const [snakeBarOpen, setSnakeBarOpen] = useState(false);\r\n    const [snakeBarType, setSnakeBarType] = useState(\"success\");\r\n    const [snakeMessage, setSnakeMessage] = useState(\"\");\r\n\r\n\r\n    const cancelSeasonEdit = () => {\r\n        setOpenEditForm(false);\r\n    }\r\n\r\n    const handleClickEdit = () => {\r\n        setOpenEditForm(true);\r\n    }\r\n\r\n    const handleCloseSnakeBar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setSnakeBarOpen(false);\r\n    };\r\n\r\n    const updateForm = async () => {\r\n        const res = await adminApi.updateSeasons(seasonName, startDate.getDay(), startDate.getMonth(), endDate.getDay(), endDate.getMonth(), description, SEASON_ID)\r\n        if (res.status === 200) {\r\n            setSnakeBarOpen(true);\r\n            setSnakeBarType(\"success\");\r\n            setSnakeMessage(\"Successfully updated\");\r\n            window.location.reload()\r\n        }\r\n        else {\r\n            setSnakeBarOpen(true);\r\n            setSnakeBarType(\"error\");\r\n            setSnakeMessage(\"Failed to Update\");\r\n        }\r\n        setOpenEditForm(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Snackbar\r\n                open={snakeBarOpen}\r\n                autoHideDuration={6000}\r\n                onClose={handleCloseSnakeBar}\r\n            >\r\n                <Alert\r\n                    onClose={handleCloseSnakeBar}\r\n                    severity={snakeBarType}\r\n                    sx={{ width: '100%' }}\r\n                >\r\n                    {snakeMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            <Dialog open={openEditForm} onClose={cancelSeasonEdit} fullWidth={true}>\r\n                <form>\r\n                    <DialogTitle>Edit {SEASON_NAME}</DialogTitle>\r\n                    <DialogContent>\r\n                        <Box sx={{ width: '100%' }}>\r\n                            <Grid container\r\n                                item\r\n                                direction=\"column\"\r\n                                spacing={2}\r\n                                justifyContent=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item sx={{ width: \"100%\" }}>\r\n                                    <TextField id=\"registration-name\"\r\n                                        label=\"Season Name\"\r\n                                        variant=\"standard\"\r\n                                        value={seasonName}\r\n                                        onChange={handleChangeSeasonName}\r\n                                        required\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item sx={{ width: \"100%\" }}>\r\n                                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                        <DatePicker\r\n                                            openTo=\"month\"\r\n                                            views={['month', 'day']}\r\n                                            label=\"Select when the season starts\"\r\n                                            value={startDate}\r\n                                            onChange={(newValue) => {\r\n                                                setStartDate(newValue);\r\n                                            }}\r\n                                            renderInput={(params) =>\r\n                                                <TextField {...params}\r\n                                                    helperText={null}\r\n                                                    sx={{\r\n                                                        width: \"100%\",\r\n                                                        minWidth: \"270px\",\r\n                                                        marginBottom: \"0.5rem\",\r\n                                                        marginTop: \"0.5rem\"\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                </Grid>\r\n                                <Grid item sx={{ width: \"100%\" }}>\r\n                                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                        <DatePicker\r\n                                            openTo=\"month\"\r\n                                            views={['month', 'day']}\r\n                                            label=\"Select when the season Ends\"\r\n                                            value={endDate}\r\n                                            onChange={(newValue) => {\r\n                                                setEndDate(newValue);\r\n                                            }}\r\n                                            renderInput={(params) =>\r\n                                                <TextField {...params}\r\n                                                    helperText={null}\r\n                                                    sx={{ width: \"100%\", minWidth: \"270px\" }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                </Grid>\r\n                                <Grid item sx={{ width: \"100%\" }}>\r\n                                    <TextField id=\"registration-description\"\r\n                                        label=\"Description\"\r\n                                        type=\"text\"\r\n                                        variant=\"standard\"\r\n                                        value={description}\r\n                                        onChange={handleChangeDescription}\r\n                                        multiline={true}\r\n                                        rows={6}\r\n                                        required\r\n                                        fullWidth\r\n                                        placeholder='250 Charecters max'\r\n                                        inputProps={{ maxLength: 250 }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={updateForm}>Add</Button>\r\n                        <Button onClick={cancelSeasonEdit}>Cancel</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n            <Card sx={{ maxWidth: 345 }}>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {SEASON_NAME}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"body2\" color=\"text.secondary\" sx={{ height: \"10rem\", overflow: \"hidden\", textOverflow: \"string\" }}>\r\n                        {SEASON_DESCRIPTION}\r\n                    </Typography>\r\n                    <Typography variant='subtitle1'>\r\n                        Duration: {`${SEASON_START_DAY} ${months[SEASON_START_MONTH]} - ${SEASON_END_DAY} ${months[SEASON_END_MONTH]}`}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button\r\n                        size=\"small\"\r\n                        onClick={handleClickEdit}\r\n                    >\r\n                        Edit\r\n                    </Button>\r\n                    <Button\r\n                        size=\"small\"\r\n                        color=\"error\"\r\n                    // onClick={handleClickOpenDelete} \r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}