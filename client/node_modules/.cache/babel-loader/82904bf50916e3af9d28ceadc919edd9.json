{"ast":null,"code":"var _jsxFileName = \"H:\\\\Agro Chain\\\\agro_chain\\\\client\\\\src\\\\components\\\\productsComponents\\\\cart\\\\cartList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux'; // MaterialUI Elements\n\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Paper from '@mui/material/Paper';\nimport DoneAllIcon from '@mui/icons-material/DoneAll';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport RemoveShoppingCartIcon from '@mui/icons-material/RemoveShoppingCart';\nimport CartItems from './cartItems';\nimport * as userApi from \"../../../api/users\";\nimport style from \"../../../styles/cartStyles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst Alert = /*#__PURE__*/React.forwardRef(_c = function Alert(props, ref) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    ref: ref,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 10\n  }, this);\n});\n_c2 = Alert;\nexport default function CartList(_ref) {\n  _s();\n\n  let {\n    carts\n  } = _ref;\n  const classes = style();\n  const users = useSelector(state => state.users);\n  const [snakeBarOpen, setSnakeBarOpen] = useState(false);\n  const [snakeBarType, setSnakeBarType] = useState(\"success\");\n  const [snakeMessage, setSnakeMessage] = useState(\"\");\n  const [products, setProducts] = useState(carts);\n  const [totalPrice, setTotalPrice] = useState(0);\n  let disableButton = carts.length === 0 ? true : false;\n  let buttonText = disableButton ? \"List empty\" : \"Place Order\";\n  let buttonIcon = disableButton ? /*#__PURE__*/_jsxDEV(RemoveShoppingCartIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 39\n  }, this) : /*#__PURE__*/_jsxDEV(DoneAllIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 70\n  }, this);\n\n  const handleCloseSnakeBar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setSnakeBarOpen(false);\n  };\n\n  useEffect(() => {\n    let price = 0;\n\n    for (let i = 0; i < products.length; i++) {\n      price += (products[i].PRODUCT_AGRO_PRICE - products[i].PRODUCT_AGRO_PRICE * products[i].PRODUCT_DISCOUNT / 100) * products[i].CART_QUANTITY;\n    }\n\n    setTotalPrice(price);\n  }, [products]);\n\n  const updateCart = (id, quantity) => {\n    const newCart = products.map(product => {\n      if (product.CART_ID === id) {\n        return { ...product,\n          CART_QUANTITY: quantity\n        };\n      }\n\n      return newCart;\n    });\n    setProducts(newCart);\n  };\n\n  const submitOrders = async e => {\n    e.preventDefault();\n    const res = await userApi.submitCart(users.userId);\n\n    if (res.status === 200) {\n      setSnakeBarOpen(true);\n      setSnakeBarType(\"success\");\n      setSnakeMessage(\"Order Successfully submitted\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snakeBarOpen,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnakeBar,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnakeBar,\n        severity: snakeBarType,\n        sx: {\n          width: '100%'\n        },\n        children: snakeMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 0,\n      className: classes.cartHeaderBox,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: classes.cartHeading,\n        children: \"Items in your cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes.cartPrice,\n        children: [\"Total Price: \", totalPrice, \" Taka\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: products.map(product => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 12,\n        md: 6,\n        xl: 6,\n        children: /*#__PURE__*/_createElement(CartItems, { ...product,\n          key: product.CART_ID,\n          updatePrice: updateCart,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }\n        })\n      }, product.CART_ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      startIcon: buttonIcon,\n      className: classes.placeButton,\n      onClick: submitOrders,\n      disabled: disableButton,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CartList, \"UiIJIeaJh0N3881GMPLkxTjFNOw=\", false, function () {\n  return [useSelector];\n});\n\n_c3 = CartList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Alert$React.forwardRef\");\n$RefreshReg$(_c2, \"Alert\");\n$RefreshReg$(_c3, \"CartList\");","map":{"version":3,"sources":["H:/Agro Chain/agro_chain/client/src/components/productsComponents/cart/cartList.js"],"names":["React","useState","useEffect","useSelector","Grid","Button","Paper","DoneAllIcon","Snackbar","MuiAlert","RemoveShoppingCartIcon","CartItems","userApi","style","Alert","forwardRef","props","ref","CartList","carts","classes","users","state","snakeBarOpen","setSnakeBarOpen","snakeBarType","setSnakeBarType","snakeMessage","setSnakeMessage","products","setProducts","totalPrice","setTotalPrice","disableButton","length","buttonText","buttonIcon","handleCloseSnakeBar","event","reason","price","i","PRODUCT_AGRO_PRICE","PRODUCT_DISCOUNT","CART_QUANTITY","updateCart","id","quantity","newCart","map","product","CART_ID","submitOrders","e","preventDefault","res","submitCart","userId","status","width","cartHeaderBox","cartHeading","cartPrice","placeButton"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\n// MaterialUI Elements\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\nimport Paper from '@mui/material/Paper';\r\nimport DoneAllIcon from '@mui/icons-material/DoneAll';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport RemoveShoppingCartIcon from '@mui/icons-material/RemoveShoppingCart';\r\n\r\nimport CartItems from './cartItems'\r\nimport * as userApi from \"../../../api/users\"\r\nimport style from \"../../../styles/cartStyles\"\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport default function CartList({carts}) {\r\n    const classes = style();\r\n    const users = useSelector((state) => state.users);\r\n\r\n    const [snakeBarOpen, setSnakeBarOpen] = useState(false);\r\n    const [snakeBarType, setSnakeBarType] = useState(\"success\");\r\n    const [snakeMessage, setSnakeMessage] = useState(\"\");\r\n    const [products, setProducts] = useState(carts);\r\n    const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n    let disableButton = carts.length === 0 ? true : false;\r\n    let buttonText = disableButton ? \"List empty\" : \"Place Order\"\r\n    let buttonIcon = disableButton ? (<RemoveShoppingCartIcon />) : (<DoneAllIcon />);\r\n\r\n    const handleCloseSnakeBar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setSnakeBarOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        let price = 0;\r\n        for(let i = 0; i < products.length; i++){\r\n            price += (products[i].PRODUCT_AGRO_PRICE - products[i].PRODUCT_AGRO_PRICE * products[i].PRODUCT_DISCOUNT /100) * products[i].CART_QUANTITY\r\n        }\r\n        setTotalPrice(price)\r\n    }, [products]);\r\n    \r\n\r\n    const updateCart = (id, quantity) => {\r\n        const newCart = products.map(product => {\r\n            if(product.CART_ID === id){\r\n                return {... product, CART_QUANTITY: quantity}\r\n            }\r\n            return newCart;\r\n        });\r\n        setProducts(newCart)\r\n    }\r\n\r\n    const submitOrders = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const res = await userApi.submitCart(users.userId);\r\n        if(res.status === 200){\r\n            setSnakeBarOpen(true);\r\n            setSnakeBarType(\"success\");\r\n            setSnakeMessage(\"Order Successfully submitted\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar \r\n                open={snakeBarOpen} \r\n                autoHideDuration={6000} \r\n                onClose={handleCloseSnakeBar}\r\n            >\r\n                <Alert \r\n                    onClose={handleCloseSnakeBar} \r\n                    severity={snakeBarType} \r\n                    sx={{ width: '100%' }}\r\n                >\r\n                    {snakeMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            <Paper elevation={0} className={classes.cartHeaderBox}>\r\n                <h1 className={classes.cartHeading}>\r\n                    Items in your cart\r\n                </h1>\r\n                <h3 className={classes.cartPrice}>\r\n                    Total Price: {totalPrice} Taka\r\n                </h3>\r\n            </Paper>\r\n            <Grid container spacing={2} >\r\n                {products.map(product => (\r\n                    <Grid item xs={12} sm={12} md={6} xl={6} key={product.CART_ID}>\r\n                        <CartItems {...product} key={product.CART_ID} updatePrice = {updateCart}/>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            <Button variant=\"contained\" \r\n                startIcon={buttonIcon} \r\n                className={classes.placeButton}\r\n                onClick={submitOrders}\r\n                disabled={disableButton}\r\n            >\r\n                    {buttonText}\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}