{"ast":null,"code":"var _jsxFileName = \"H:\\\\Agro Chain\\\\agro_chain\\\\client\\\\src\\\\components\\\\productsComponents\\\\seasons\\\\seasons.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport SeasonList from \"./seasonsList\";\nimport style from \"../../../styles/seasonsStyles\";\nimport useInputState from '../../../hooks/useInputState';\nimport * as adminApi from '../../../api/admin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alert = /*#__PURE__*/React.forwardRef(_c = function Alert(props, ref) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    ref: ref,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 12\n  }, this);\n}); // const minDate = new Date('2022-01-01T00:00:00.000');\n// const maxDate = new Date('2100-01-01T00:00:00.000');\n\n_c2 = Alert;\n\nfunction Season() {\n  _s();\n\n  const classes = style();\n  const [openAddForm, setOpenAddForm] = useState(false);\n  const [seasonName, handleChangeSeasonName] = useInputState(\"\");\n  const [description, handleChangeDescription] = useInputState(\"\");\n  const [startDate, setStartDate] = useState(new Date());\n  const [endDate, setEndDate] = useState(new Date());\n  const [snakeBarOpen, setSnakeBarOpen] = useState(false);\n  const [snakeBarType, setSnakeBarType] = useState(\"success\");\n  const [snakeMessage, setSnakeMessage] = useState(\"\");\n\n  const handleCloseSnakeBar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setSnakeBarOpen(false);\n  };\n\n  const openForm = () => {\n    setOpenAddForm(true);\n  };\n\n  const cancelSeason = () => {\n    setOpenAddForm(false);\n  };\n\n  const submitForm = async e => {\n    e.preventDefault();\n    let response = await adminApi.addSeason(seasonName, startDate.getDate(), startDate.getMonth(), endDate.getDate(), endDate.getMonth());\n\n    if (response.status === 200) {\n      setSnakeBarOpen(true);\n      setSnakeBarType('success');\n      setSnakeMessage(`${seasonName} Season added`);\n    } else {\n      setSnakeBarOpen(true);\n      setSnakeBarType('error');\n      setSnakeMessage(`failed to add Season`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snakeBarOpen,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnakeBar,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnakeBar,\n        severity: snakeBarType,\n        sx: {\n          width: '100%'\n        },\n        children: snakeMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SeasonList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: '100%'\n      },\n      children: [openAddForm === false && /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          className: classes.addButton,\n          className: classes.placeButton,\n          onClick: openForm,\n          disabled: openAddForm,\n          sx: {\n            width: \"25%\",\n            minWidth: \"270px\"\n          },\n          children: \"Add a new season\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: openAddForm,\n        onClose: cancelSeason,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            children: \"Add Season\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n              children: \"To add a new season, enter the name of the season and select the start and end date of the season. year dosen't matter, select the month and date.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '100%'\n              },\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                item: true,\n                direction: \"column\",\n                spacing: 2,\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    id: \"registration-name\",\n                    label: \"Season Name\",\n                    variant: \"standard\",\n                    value: seasonName,\n                    onChange: handleChangeSeasonName,\n                    required: true,\n                    sx: {\n                      width: \"100%\",\n                      minWidth: \"270px\",\n                      marginTop: \"1rem\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 123,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n                    dateAdapter: AdapterDateFns,\n                    children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                      openTo: \"month\",\n                      views: ['month', 'day'],\n                      label: \"Select when the season starts\",\n                      value: startDate,\n                      onChange: newValue => {\n                        setStartDate(newValue);\n                      },\n                      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                        helperText: null,\n                        sx: {\n                          width: \"100%\",\n                          minWidth: \"270px\",\n                          marginBottom: \"0.5rem\",\n                          marginTop: \"0.5rem\"\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 147,\n                        columnNumber: 53\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 138,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n                    dateAdapter: AdapterDateFns,\n                    children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                      openTo: \"month\",\n                      views: ['month', 'day'],\n                      label: \"Select when the season Ends\",\n                      value: endDate,\n                      onChange: newValue => {\n                        setEndDate(newValue);\n                      },\n                      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                        helperText: null,\n                        sx: {\n                          width: \"100%\",\n                          minWidth: \"270px\"\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 171,\n                        columnNumber: 53\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 162,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    id: \"registration-description\",\n                    label: \"Description\",\n                    type: \"text\",\n                    variant: \"standard\",\n                    value: description,\n                    onChange: handleChangeDescription,\n                    multiline: true,\n                    rows: 4,\n                    required: true,\n                    sx: {\n                      width: \"100%\",\n                      minWidth: \"270px\",\n                      marginTop: \"1rem\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 180,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: submitForm,\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: cancelSeason,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      component: \"div\",\n      gutterBottom: true,\n      className: classes.heading,\n      textAlign: \"center\",\n      children: [\"We had joy, we had fun, we had seasons in the sun. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 72\n      }, this), \"But the hills that we climbed were just seasons out of time. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 82\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 91\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Season, \"w7jBmIyFBgXdpEcU8NWSfo2od7A=\", false, function () {\n  return [useInputState, useInputState];\n});\n\n_c3 = Season;\nexport default Season;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Alert$React.forwardRef\");\n$RefreshReg$(_c2, \"Alert\");\n$RefreshReg$(_c3, \"Season\");","map":{"version":3,"sources":["H:/Agro Chain/agro_chain/client/src/components/productsComponents/seasons/seasons.js"],"names":["React","useState","useEffect","Box","Typography","Button","TextField","Grid","AdapterDateFns","Snackbar","MuiAlert","LocalizationProvider","DatePicker","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","SeasonList","style","useInputState","adminApi","Alert","forwardRef","props","ref","Season","classes","openAddForm","setOpenAddForm","seasonName","handleChangeSeasonName","description","handleChangeDescription","startDate","setStartDate","Date","endDate","setEndDate","snakeBarOpen","setSnakeBarOpen","snakeBarType","setSnakeBarType","snakeMessage","setSnakeMessage","handleCloseSnakeBar","event","reason","openForm","cancelSeason","submitForm","e","preventDefault","response","addSeason","getDate","getMonth","status","width","addButton","placeButton","minWidth","marginTop","newValue","params","marginBottom","heading"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Grid from '@mui/material/Grid';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nimport SeasonList from \"./seasonsList\"\r\nimport style from \"../../../styles/seasonsStyles\"\r\nimport useInputState from '../../../hooks/useInputState';\r\nimport * as adminApi from '../../../api/admin'\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n// const minDate = new Date('2022-01-01T00:00:00.000');\r\n// const maxDate = new Date('2100-01-01T00:00:00.000');\r\n\r\nfunction Season(){\r\n    const classes = style();\r\n    const [openAddForm, setOpenAddForm] = useState(false);\r\n    const [seasonName, handleChangeSeasonName] = useInputState(\"\");\r\n    const [description, handleChangeDescription] = useInputState(\"\");\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    const [snakeBarOpen, setSnakeBarOpen] = useState(false);\r\n    const [snakeBarType, setSnakeBarType] = useState(\"success\");\r\n    const [snakeMessage, setSnakeMessage] = useState(\"\");\r\n\r\n    const handleCloseSnakeBar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setSnakeBarOpen(false);\r\n    };\r\n    \r\n    const openForm = () => {\r\n        setOpenAddForm(true);\r\n    }\r\n\r\n    const cancelSeason = () => {\r\n        setOpenAddForm(false);\r\n    }\r\n\r\n    const submitForm = async (e) => {\r\n        e.preventDefault(); \r\n        let response = await adminApi.addSeason(seasonName, startDate.getDate(), startDate.getMonth(), endDate.getDate(), endDate.getMonth(), );\r\n        if(response.status === 200){\r\n            setSnakeBarOpen(true);\r\n            setSnakeBarType('success');\r\n            setSnakeMessage(`${seasonName} Season added`);\r\n        }\r\n        else {\r\n            setSnakeBarOpen(true);\r\n            setSnakeBarType('error');\r\n            setSnakeMessage(`failed to add Season`);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Snackbar \r\n                open={snakeBarOpen} \r\n                autoHideDuration={6000} \r\n                onClose={handleCloseSnakeBar}\r\n            >\r\n                <Alert \r\n                    onClose={handleCloseSnakeBar} \r\n                    severity={snakeBarType} \r\n                    sx={{ width: '100%' }}\r\n                >\r\n                    {snakeMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            <SeasonList />\r\n\r\n            <Box sx={{ width: '100%' }}>\r\n                {openAddForm === false && (\r\n                    <Grid container \r\n                        justifyContent=\"center\" \r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Button variant=\"contained\" \r\n                         className={classes.addButton}\r\n                            className={classes.placeButton}\r\n                            onClick={openForm}\r\n                            disabled={openAddForm}\r\n                            sx={{width:\"25%\", minWidth: \"270px\"}}\r\n                        >\r\n                            Add a new season\r\n                        </Button>\r\n                    </Grid>\r\n                )}\r\n                <Dialog open={openAddForm} onClose={cancelSeason}>\r\n                    <form>\r\n                        <DialogTitle>Add Season</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                To add a new season, enter the name of the season and select the start and end date of the season. year dosen't matter, select the month and date.\r\n                            </DialogContentText>\r\n                            <Box sx={{ width: '100%' }}>\r\n                                <Grid container \r\n                                    item \r\n                                    direction=\"column\" \r\n                                    spacing={2} \r\n                                    justifyContent=\"center\" \r\n                                    alignItems=\"center\"\r\n                                >\r\n                                    <Grid item>\r\n                                        <TextField id=\"registration-name\" \r\n                                            label=\"Season Name\" \r\n                                            variant=\"standard\" \r\n                                            value={seasonName} \r\n                                            onChange={handleChangeSeasonName}\r\n                                            required\r\n                                            sx={{\r\n                                                width:\"100%\", \r\n                                                minWidth: \"270px\", \r\n                                                marginTop: \"1rem\"\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item> \r\n                                        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                            <DatePicker\r\n                                                openTo=\"month\"\r\n                                                views={['month', 'day']}\r\n                                                label=\"Select when the season starts\"\r\n                                                value={startDate}\r\n                                                onChange={(newValue) => {\r\n                                                    setStartDate(newValue);\r\n                                                }}\r\n                                                renderInput={(params) => \r\n                                                    <TextField {...params} \r\n                                                        helperText={null} \r\n                                                        sx={{\r\n                                                            width:\"100%\", \r\n                                                            minWidth: \"270px\",\r\n                                                            marginBottom: \"0.5rem\", \r\n                                                            marginTop: \"0.5rem\"\r\n                                                        }}\r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </LocalizationProvider>\r\n                                    </Grid>\r\n                                    <Grid item> \r\n                                        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                            <DatePicker\r\n                                                openTo=\"month\"\r\n                                                views={['month', 'day']}\r\n                                                label=\"Select when the season Ends\"\r\n                                                value={endDate}\r\n                                                onChange={(newValue) => {\r\n                                                    setEndDate(newValue);\r\n                                                }}\r\n                                                renderInput={(params) => \r\n                                                    <TextField {...params} \r\n                                                        helperText={null} \r\n                                                        sx={{width:\"100%\", minWidth: \"270px\"}}\r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </LocalizationProvider>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                    <TextField id=\"registration-description\" \r\n                                        label=\"Description\" \r\n                                        type=\"text\"\r\n                                        variant=\"standard\" \r\n                                        value={description}\r\n                                        onChange={handleChangeDescription}\r\n                                        multiline = {true}\r\n                                        rows={4}\r\n                                        required\r\n                                        sx={{\r\n                                            width:\"100%\", \r\n                                            minWidth: \"270px\", \r\n                                            marginTop: \"1rem\"\r\n                                        }}\r\n                                    />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={submitForm}>Add</Button>\r\n                            <Button onClick={cancelSeason}>Cancel</Button>\r\n                        </DialogActions>\r\n                    </form>\r\n                </Dialog>\r\n            </Box>\r\n            <Typography variant=\"h6\" component=\"div\" gutterBottom className={classes.heading} textAlign=\"center\">\r\n                    We had joy, we had fun, we had seasons in the sun. <br></br>\r\n                    But the hills that we climbed were just seasons out of time. <br></br><br></br>\r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Season;\r\n\r\n"]},"metadata":{},"sourceType":"module"}